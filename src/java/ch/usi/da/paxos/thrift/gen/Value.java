/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ch.usi.da.paxos.thrift.gen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-04-23")
public class Value implements org.apache.thrift.TBase<Value, Value._Fields>, java.io.Serializable, Cloneable, Comparable<Value> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Value");

  private static final org.apache.thrift.protocol.TField CMD_FIELD_DESC = new org.apache.thrift.protocol.TField("cmd", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SKIP_FIELD_DESC = new org.apache.thrift.protocol.TField("skip", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField CONTROL_FIELD_DESC = new org.apache.thrift.protocol.TField("control", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ValueStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ValueTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer cmd; // required
  public boolean skip; // optional
  public @org.apache.thrift.annotation.Nullable Control control; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CMD((short)1, "cmd"),
    SKIP((short)2, "skip"),
    CONTROL((short)3, "control");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CMD
          return CMD;
        case 2: // SKIP
          return SKIP;
        case 3: // CONTROL
          return CONTROL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SKIP_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SKIP,_Fields.CONTROL};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CMD, new org.apache.thrift.meta_data.FieldMetaData("cmd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SKIP, new org.apache.thrift.meta_data.FieldMetaData("skip", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CONTROL, new org.apache.thrift.meta_data.FieldMetaData("control", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Control.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Value.class, metaDataMap);
  }

  public Value() {
  }

  public Value(
    java.nio.ByteBuffer cmd)
  {
    this();
    this.cmd = org.apache.thrift.TBaseHelper.copyBinary(cmd);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Value(Value other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCmd()) {
      this.cmd = org.apache.thrift.TBaseHelper.copyBinary(other.cmd);
    }
    this.skip = other.skip;
    if (other.isSetControl()) {
      this.control = new Control(other.control);
    }
  }

  public Value deepCopy() {
    return new Value(this);
  }

  @Override
  public void clear() {
    this.cmd = null;
    setSkipIsSet(false);
    this.skip = false;
    this.control = null;
  }

  public byte[] getCmd() {
    setCmd(org.apache.thrift.TBaseHelper.rightSize(cmd));
    return cmd == null ? null : cmd.array();
  }

  public java.nio.ByteBuffer bufferForCmd() {
    return org.apache.thrift.TBaseHelper.copyBinary(cmd);
  }

  public Value setCmd(byte[] cmd) {
    this.cmd = cmd == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(cmd.clone());
    return this;
  }

  public Value setCmd(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer cmd) {
    this.cmd = org.apache.thrift.TBaseHelper.copyBinary(cmd);
    return this;
  }

  public void unsetCmd() {
    this.cmd = null;
  }

  /** Returns true if field cmd is set (has been assigned a value) and false otherwise */
  public boolean isSetCmd() {
    return this.cmd != null;
  }

  public void setCmdIsSet(boolean value) {
    if (!value) {
      this.cmd = null;
    }
  }

  public boolean isSkip() {
    return this.skip;
  }

  public Value setSkip(boolean skip) {
    this.skip = skip;
    setSkipIsSet(true);
    return this;
  }

  public void unsetSkip() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SKIP_ISSET_ID);
  }

  /** Returns true if field skip is set (has been assigned a value) and false otherwise */
  public boolean isSetSkip() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SKIP_ISSET_ID);
  }

  public void setSkipIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SKIP_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public Control getControl() {
    return this.control;
  }

  public Value setControl(@org.apache.thrift.annotation.Nullable Control control) {
    this.control = control;
    return this;
  }

  public void unsetControl() {
    this.control = null;
  }

  /** Returns true if field control is set (has been assigned a value) and false otherwise */
  public boolean isSetControl() {
    return this.control != null;
  }

  public void setControlIsSet(boolean value) {
    if (!value) {
      this.control = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CMD:
      if (value == null) {
        unsetCmd();
      } else {
        if (value instanceof byte[]) {
          setCmd((byte[])value);
        } else {
          setCmd((java.nio.ByteBuffer)value);
        }
      }
      break;

    case SKIP:
      if (value == null) {
        unsetSkip();
      } else {
        setSkip((java.lang.Boolean)value);
      }
      break;

    case CONTROL:
      if (value == null) {
        unsetControl();
      } else {
        setControl((Control)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CMD:
      return getCmd();

    case SKIP:
      return isSkip();

    case CONTROL:
      return getControl();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CMD:
      return isSetCmd();
    case SKIP:
      return isSetSkip();
    case CONTROL:
      return isSetControl();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Value)
      return this.equals((Value)that);
    return false;
  }

  public boolean equals(Value that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cmd = true && this.isSetCmd();
    boolean that_present_cmd = true && that.isSetCmd();
    if (this_present_cmd || that_present_cmd) {
      if (!(this_present_cmd && that_present_cmd))
        return false;
      if (!this.cmd.equals(that.cmd))
        return false;
    }

    boolean this_present_skip = true && this.isSetSkip();
    boolean that_present_skip = true && that.isSetSkip();
    if (this_present_skip || that_present_skip) {
      if (!(this_present_skip && that_present_skip))
        return false;
      if (this.skip != that.skip)
        return false;
    }

    boolean this_present_control = true && this.isSetControl();
    boolean that_present_control = true && that.isSetControl();
    if (this_present_control || that_present_control) {
      if (!(this_present_control && that_present_control))
        return false;
      if (!this.control.equals(that.control))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCmd()) ? 131071 : 524287);
    if (isSetCmd())
      hashCode = hashCode * 8191 + cmd.hashCode();

    hashCode = hashCode * 8191 + ((isSetSkip()) ? 131071 : 524287);
    if (isSetSkip())
      hashCode = hashCode * 8191 + ((skip) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetControl()) ? 131071 : 524287);
    if (isSetControl())
      hashCode = hashCode * 8191 + control.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Value other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetCmd(), other.isSetCmd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCmd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cmd, other.cmd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSkip(), other.isSetSkip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skip, other.skip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetControl(), other.isSetControl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetControl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.control, other.control);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Value(");
    boolean first = true;

    sb.append("cmd:");
    if (this.cmd == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.cmd, sb);
    }
    first = false;
    if (isSetSkip()) {
      if (!first) sb.append(", ");
      sb.append("skip:");
      sb.append(this.skip);
      first = false;
    }
    if (isSetControl()) {
      if (!first) sb.append(", ");
      sb.append("control:");
      if (this.control == null) {
        sb.append("null");
      } else {
        sb.append(this.control);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (control != null) {
      control.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ValueStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ValueStandardScheme getScheme() {
      return new ValueStandardScheme();
    }
  }

  private static class ValueStandardScheme extends org.apache.thrift.scheme.StandardScheme<Value> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Value struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CMD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cmd = iprot.readBinary();
              struct.setCmdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SKIP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.skip = iprot.readBool();
              struct.setSkipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTROL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.control = new Control();
              struct.control.read(iprot);
              struct.setControlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Value struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cmd != null) {
        oprot.writeFieldBegin(CMD_FIELD_DESC);
        oprot.writeBinary(struct.cmd);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSkip()) {
        oprot.writeFieldBegin(SKIP_FIELD_DESC);
        oprot.writeBool(struct.skip);
        oprot.writeFieldEnd();
      }
      if (struct.control != null) {
        if (struct.isSetControl()) {
          oprot.writeFieldBegin(CONTROL_FIELD_DESC);
          struct.control.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ValueTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ValueTupleScheme getScheme() {
      return new ValueTupleScheme();
    }
  }

  private static class ValueTupleScheme extends org.apache.thrift.scheme.TupleScheme<Value> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Value struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCmd()) {
        optionals.set(0);
      }
      if (struct.isSetSkip()) {
        optionals.set(1);
      }
      if (struct.isSetControl()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCmd()) {
        oprot.writeBinary(struct.cmd);
      }
      if (struct.isSetSkip()) {
        oprot.writeBool(struct.skip);
      }
      if (struct.isSetControl()) {
        struct.control.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Value struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.cmd = iprot.readBinary();
        struct.setCmdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.skip = iprot.readBool();
        struct.setSkipIsSet(true);
      }
      if (incoming.get(2)) {
        struct.control = new Control();
        struct.control.read(iprot);
        struct.setControlIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

